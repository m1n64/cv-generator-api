// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/contacts.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContactsService_GetContacts_FullMethodName       = "/contacts.ContactsService/GetContacts"
	ContactsService_GetContactByID_FullMethodName    = "/contacts.ContactsService/GetContactByID"
	ContactsService_CreateContact_FullMethodName     = "/contacts.ContactsService/CreateContact"
	ContactsService_DeleteContactByID_FullMethodName = "/contacts.ContactsService/DeleteContactByID"
	ContactsService_UpdateContactByID_FullMethodName = "/contacts.ContactsService/UpdateContactByID"
)

// ContactsServiceClient is the client API for ContactsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsServiceClient interface {
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*AllContactsResponse, error)
	GetContactByID(ctx context.Context, in *GetContactByIDRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	DeleteContactByID(ctx context.Context, in *DeleteContactByIDRequest, opts ...grpc.CallOption) (*DeleteContactByIDResponse, error)
	UpdateContactByID(ctx context.Context, in *UpdateContactByIDRequest, opts ...grpc.CallOption) (*ContactResponse, error)
}

type contactsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsServiceClient(cc grpc.ClientConnInterface) ContactsServiceClient {
	return &contactsServiceClient{cc}
}

func (c *contactsServiceClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*AllContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllContactsResponse)
	err := c.cc.Invoke(ctx, ContactsService_GetContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) GetContactByID(ctx context.Context, in *GetContactByIDRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, ContactsService_GetContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, ContactsService_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) DeleteContactByID(ctx context.Context, in *DeleteContactByIDRequest, opts ...grpc.CallOption) (*DeleteContactByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteContactByIDResponse)
	err := c.cc.Invoke(ctx, ContactsService_DeleteContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) UpdateContactByID(ctx context.Context, in *UpdateContactByIDRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, ContactsService_UpdateContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServiceServer is the server API for ContactsService service.
// All implementations must embed UnimplementedContactsServiceServer
// for forward compatibility.
type ContactsServiceServer interface {
	GetContacts(context.Context, *GetContactsRequest) (*AllContactsResponse, error)
	GetContactByID(context.Context, *GetContactByIDRequest) (*ContactResponse, error)
	CreateContact(context.Context, *CreateContactRequest) (*ContactResponse, error)
	DeleteContactByID(context.Context, *DeleteContactByIDRequest) (*DeleteContactByIDResponse, error)
	UpdateContactByID(context.Context, *UpdateContactByIDRequest) (*ContactResponse, error)
	mustEmbedUnimplementedContactsServiceServer()
}

// UnimplementedContactsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContactsServiceServer struct{}

func (UnimplementedContactsServiceServer) GetContacts(context.Context, *GetContactsRequest) (*AllContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedContactsServiceServer) GetContactByID(context.Context, *GetContactByIDRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactByID not implemented")
}
func (UnimplementedContactsServiceServer) CreateContact(context.Context, *CreateContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactsServiceServer) DeleteContactByID(context.Context, *DeleteContactByIDRequest) (*DeleteContactByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactByID not implemented")
}
func (UnimplementedContactsServiceServer) UpdateContactByID(context.Context, *UpdateContactByIDRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactByID not implemented")
}
func (UnimplementedContactsServiceServer) mustEmbedUnimplementedContactsServiceServer() {}
func (UnimplementedContactsServiceServer) testEmbeddedByValue()                         {}

// UnsafeContactsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServiceServer will
// result in compilation errors.
type UnsafeContactsServiceServer interface {
	mustEmbedUnimplementedContactsServiceServer()
}

func RegisterContactsServiceServer(s grpc.ServiceRegistrar, srv ContactsServiceServer) {
	// If the following call pancis, it indicates UnimplementedContactsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContactsService_ServiceDesc, srv)
}

func _ContactsService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_GetContactByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).GetContactByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_GetContactByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).GetContactByID(ctx, req.(*GetContactByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_DeleteContactByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).DeleteContactByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_DeleteContactByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).DeleteContactByID(ctx, req.(*DeleteContactByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_UpdateContactByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).UpdateContactByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_UpdateContactByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).UpdateContactByID(ctx, req.(*UpdateContactByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactsService_ServiceDesc is the grpc.ServiceDesc for ContactsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contacts.ContactsService",
	HandlerType: (*ContactsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContacts",
			Handler:    _ContactsService_GetContacts_Handler,
		},
		{
			MethodName: "GetContactByID",
			Handler:    _ContactsService_GetContactByID_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _ContactsService_CreateContact_Handler,
		},
		{
			MethodName: "DeleteContactByID",
			Handler:    _ContactsService_DeleteContactByID_Handler,
		},
		{
			MethodName: "UpdateContactByID",
			Handler:    _ContactsService_UpdateContactByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contacts.proto",
}
