// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/languages.proto

package languages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LanguagesService_GetLanguages_FullMethodName       = "/languages.LanguagesService/GetLanguages"
	LanguagesService_GetLanguageByID_FullMethodName    = "/languages.LanguagesService/GetLanguageByID"
	LanguagesService_CreateLanguage_FullMethodName     = "/languages.LanguagesService/CreateLanguage"
	LanguagesService_DeleteLanguageByID_FullMethodName = "/languages.LanguagesService/DeleteLanguageByID"
	LanguagesService_UpdateLanguageByID_FullMethodName = "/languages.LanguagesService/UpdateLanguageByID"
)

// LanguagesServiceClient is the client API for LanguagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguagesServiceClient interface {
	GetLanguages(ctx context.Context, in *GetLanguagesRequest, opts ...grpc.CallOption) (*AllLanguagesResponse, error)
	GetLanguageByID(ctx context.Context, in *GetLanguageByIDRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
	CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
	DeleteLanguageByID(ctx context.Context, in *DeleteLanguageByIDRequest, opts ...grpc.CallOption) (*DeleteLanguageByIDResponse, error)
	UpdateLanguageByID(ctx context.Context, in *UpdateLanguageByIDRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
}

type languagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguagesServiceClient(cc grpc.ClientConnInterface) LanguagesServiceClient {
	return &languagesServiceClient{cc}
}

func (c *languagesServiceClient) GetLanguages(ctx context.Context, in *GetLanguagesRequest, opts ...grpc.CallOption) (*AllLanguagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllLanguagesResponse)
	err := c.cc.Invoke(ctx, LanguagesService_GetLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) GetLanguageByID(ctx context.Context, in *GetLanguageByIDRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, LanguagesService_GetLanguageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, LanguagesService_CreateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) DeleteLanguageByID(ctx context.Context, in *DeleteLanguageByIDRequest, opts ...grpc.CallOption) (*DeleteLanguageByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLanguageByIDResponse)
	err := c.cc.Invoke(ctx, LanguagesService_DeleteLanguageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesServiceClient) UpdateLanguageByID(ctx context.Context, in *UpdateLanguageByIDRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, LanguagesService_UpdateLanguageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguagesServiceServer is the server API for LanguagesService service.
// All implementations must embed UnimplementedLanguagesServiceServer
// for forward compatibility.
type LanguagesServiceServer interface {
	GetLanguages(context.Context, *GetLanguagesRequest) (*AllLanguagesResponse, error)
	GetLanguageByID(context.Context, *GetLanguageByIDRequest) (*LanguageResponse, error)
	CreateLanguage(context.Context, *CreateLanguageRequest) (*LanguageResponse, error)
	DeleteLanguageByID(context.Context, *DeleteLanguageByIDRequest) (*DeleteLanguageByIDResponse, error)
	UpdateLanguageByID(context.Context, *UpdateLanguageByIDRequest) (*LanguageResponse, error)
	mustEmbedUnimplementedLanguagesServiceServer()
}

// UnimplementedLanguagesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguagesServiceServer struct{}

func (UnimplementedLanguagesServiceServer) GetLanguages(context.Context, *GetLanguagesRequest) (*AllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedLanguagesServiceServer) GetLanguageByID(context.Context, *GetLanguageByIDRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageByID not implemented")
}
func (UnimplementedLanguagesServiceServer) CreateLanguage(context.Context, *CreateLanguageRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguage not implemented")
}
func (UnimplementedLanguagesServiceServer) DeleteLanguageByID(context.Context, *DeleteLanguageByIDRequest) (*DeleteLanguageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguageByID not implemented")
}
func (UnimplementedLanguagesServiceServer) UpdateLanguageByID(context.Context, *UpdateLanguageByIDRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageByID not implemented")
}
func (UnimplementedLanguagesServiceServer) mustEmbedUnimplementedLanguagesServiceServer() {}
func (UnimplementedLanguagesServiceServer) testEmbeddedByValue()                          {}

// UnsafeLanguagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguagesServiceServer will
// result in compilation errors.
type UnsafeLanguagesServiceServer interface {
	mustEmbedUnimplementedLanguagesServiceServer()
}

func RegisterLanguagesServiceServer(s grpc.ServiceRegistrar, srv LanguagesServiceServer) {
	// If the following call pancis, it indicates UnimplementedLanguagesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LanguagesService_ServiceDesc, srv)
}

func _LanguagesService_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_GetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).GetLanguages(ctx, req.(*GetLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_GetLanguageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).GetLanguageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_GetLanguageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).GetLanguageByID(ctx, req.(*GetLanguageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_CreateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).CreateLanguage(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_DeleteLanguageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).DeleteLanguageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_DeleteLanguageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).DeleteLanguageByID(ctx, req.(*DeleteLanguageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguagesService_UpdateLanguageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServiceServer).UpdateLanguageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguagesService_UpdateLanguageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServiceServer).UpdateLanguageByID(ctx, req.(*UpdateLanguageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguagesService_ServiceDesc is the grpc.ServiceDesc for LanguagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "languages.LanguagesService",
	HandlerType: (*LanguagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguages",
			Handler:    _LanguagesService_GetLanguages_Handler,
		},
		{
			MethodName: "GetLanguageByID",
			Handler:    _LanguagesService_GetLanguageByID_Handler,
		},
		{
			MethodName: "CreateLanguage",
			Handler:    _LanguagesService_CreateLanguage_Handler,
		},
		{
			MethodName: "DeleteLanguageByID",
			Handler:    _LanguagesService_DeleteLanguageByID_Handler,
		},
		{
			MethodName: "UpdateLanguageByID",
			Handler:    _LanguagesService_UpdateLanguageByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/languages.proto",
}
