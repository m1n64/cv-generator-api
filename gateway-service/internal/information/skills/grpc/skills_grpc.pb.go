// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/skills.proto

package skills

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SkillsService_GetSkills_FullMethodName       = "/skills.SkillsService/GetSkills"
	SkillsService_GetSkillByID_FullMethodName    = "/skills.SkillsService/GetSkillByID"
	SkillsService_CreateSkill_FullMethodName     = "/skills.SkillsService/CreateSkill"
	SkillsService_DeleteSkillByID_FullMethodName = "/skills.SkillsService/DeleteSkillByID"
	SkillsService_UpdateSkillByID_FullMethodName = "/skills.SkillsService/UpdateSkillByID"
)

// SkillsServiceClient is the client API for SkillsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkillsServiceClient interface {
	GetSkills(ctx context.Context, in *GetSkillsRequest, opts ...grpc.CallOption) (*AllSkillsResponse, error)
	GetSkillByID(ctx context.Context, in *GetSkillByIDRequest, opts ...grpc.CallOption) (*SkillResponse, error)
	CreateSkill(ctx context.Context, in *CreateSkillRequest, opts ...grpc.CallOption) (*SkillResponse, error)
	DeleteSkillByID(ctx context.Context, in *DeleteSkillByIDRequest, opts ...grpc.CallOption) (*DeleteSkillByIDResponse, error)
	UpdateSkillByID(ctx context.Context, in *UpdateSkillByIDRequest, opts ...grpc.CallOption) (*SkillResponse, error)
}

type skillsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkillsServiceClient(cc grpc.ClientConnInterface) SkillsServiceClient {
	return &skillsServiceClient{cc}
}

func (c *skillsServiceClient) GetSkills(ctx context.Context, in *GetSkillsRequest, opts ...grpc.CallOption) (*AllSkillsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllSkillsResponse)
	err := c.cc.Invoke(ctx, SkillsService_GetSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) GetSkillByID(ctx context.Context, in *GetSkillByIDRequest, opts ...grpc.CallOption) (*SkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillResponse)
	err := c.cc.Invoke(ctx, SkillsService_GetSkillByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) CreateSkill(ctx context.Context, in *CreateSkillRequest, opts ...grpc.CallOption) (*SkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillResponse)
	err := c.cc.Invoke(ctx, SkillsService_CreateSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) DeleteSkillByID(ctx context.Context, in *DeleteSkillByIDRequest, opts ...grpc.CallOption) (*DeleteSkillByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSkillByIDResponse)
	err := c.cc.Invoke(ctx, SkillsService_DeleteSkillByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) UpdateSkillByID(ctx context.Context, in *UpdateSkillByIDRequest, opts ...grpc.CallOption) (*SkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillResponse)
	err := c.cc.Invoke(ctx, SkillsService_UpdateSkillByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkillsServiceServer is the server API for SkillsService service.
// All implementations must embed UnimplementedSkillsServiceServer
// for forward compatibility.
type SkillsServiceServer interface {
	GetSkills(context.Context, *GetSkillsRequest) (*AllSkillsResponse, error)
	GetSkillByID(context.Context, *GetSkillByIDRequest) (*SkillResponse, error)
	CreateSkill(context.Context, *CreateSkillRequest) (*SkillResponse, error)
	DeleteSkillByID(context.Context, *DeleteSkillByIDRequest) (*DeleteSkillByIDResponse, error)
	UpdateSkillByID(context.Context, *UpdateSkillByIDRequest) (*SkillResponse, error)
	mustEmbedUnimplementedSkillsServiceServer()
}

// UnimplementedSkillsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSkillsServiceServer struct{}

func (UnimplementedSkillsServiceServer) GetSkills(context.Context, *GetSkillsRequest) (*AllSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkills not implemented")
}
func (UnimplementedSkillsServiceServer) GetSkillByID(context.Context, *GetSkillByIDRequest) (*SkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillByID not implemented")
}
func (UnimplementedSkillsServiceServer) CreateSkill(context.Context, *CreateSkillRequest) (*SkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkill not implemented")
}
func (UnimplementedSkillsServiceServer) DeleteSkillByID(context.Context, *DeleteSkillByIDRequest) (*DeleteSkillByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillByID not implemented")
}
func (UnimplementedSkillsServiceServer) UpdateSkillByID(context.Context, *UpdateSkillByIDRequest) (*SkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillByID not implemented")
}
func (UnimplementedSkillsServiceServer) mustEmbedUnimplementedSkillsServiceServer() {}
func (UnimplementedSkillsServiceServer) testEmbeddedByValue()                       {}

// UnsafeSkillsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkillsServiceServer will
// result in compilation errors.
type UnsafeSkillsServiceServer interface {
	mustEmbedUnimplementedSkillsServiceServer()
}

func RegisterSkillsServiceServer(s grpc.ServiceRegistrar, srv SkillsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSkillsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SkillsService_ServiceDesc, srv)
}

func _SkillsService_GetSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).GetSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_GetSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).GetSkills(ctx, req.(*GetSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_GetSkillByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).GetSkillByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_GetSkillByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).GetSkillByID(ctx, req.(*GetSkillByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_CreateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).CreateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_CreateSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).CreateSkill(ctx, req.(*CreateSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_DeleteSkillByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).DeleteSkillByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_DeleteSkillByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).DeleteSkillByID(ctx, req.(*DeleteSkillByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_UpdateSkillByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).UpdateSkillByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_UpdateSkillByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).UpdateSkillByID(ctx, req.(*UpdateSkillByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SkillsService_ServiceDesc is the grpc.ServiceDesc for SkillsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkillsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skills.SkillsService",
	HandlerType: (*SkillsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSkills",
			Handler:    _SkillsService_GetSkills_Handler,
		},
		{
			MethodName: "GetSkillByID",
			Handler:    _SkillsService_GetSkillByID_Handler,
		},
		{
			MethodName: "CreateSkill",
			Handler:    _SkillsService_CreateSkill_Handler,
		},
		{
			MethodName: "DeleteSkillByID",
			Handler:    _SkillsService_DeleteSkillByID_Handler,
		},
		{
			MethodName: "UpdateSkillByID",
			Handler:    _SkillsService_UpdateSkillByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/skills.proto",
}
