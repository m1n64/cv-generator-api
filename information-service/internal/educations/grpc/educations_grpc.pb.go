// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/educations.proto

package educations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EducationService_GetEducations_FullMethodName       = "/educations.EducationService/GetEducations"
	EducationService_GetEducationByID_FullMethodName    = "/educations.EducationService/GetEducationByID"
	EducationService_CreateEducation_FullMethodName     = "/educations.EducationService/CreateEducation"
	EducationService_DeleteEducationByID_FullMethodName = "/educations.EducationService/DeleteEducationByID"
	EducationService_UpdateEducationByID_FullMethodName = "/educations.EducationService/UpdateEducationByID"
)

// EducationServiceClient is the client API for EducationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EducationServiceClient interface {
	GetEducations(ctx context.Context, in *GetEducationsRequest, opts ...grpc.CallOption) (*AllEducationsResponse, error)
	GetEducationByID(ctx context.Context, in *GetEducationByIDRequest, opts ...grpc.CallOption) (*EducationResponse, error)
	CreateEducation(ctx context.Context, in *CreateEducationRequest, opts ...grpc.CallOption) (*EducationResponse, error)
	DeleteEducationByID(ctx context.Context, in *DeleteEducationByIDRequest, opts ...grpc.CallOption) (*DeleteEducationByIDResponse, error)
	UpdateEducationByID(ctx context.Context, in *UpdateEducationByIDRequest, opts ...grpc.CallOption) (*EducationResponse, error)
}

type educationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEducationServiceClient(cc grpc.ClientConnInterface) EducationServiceClient {
	return &educationServiceClient{cc}
}

func (c *educationServiceClient) GetEducations(ctx context.Context, in *GetEducationsRequest, opts ...grpc.CallOption) (*AllEducationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllEducationsResponse)
	err := c.cc.Invoke(ctx, EducationService_GetEducations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationServiceClient) GetEducationByID(ctx context.Context, in *GetEducationByIDRequest, opts ...grpc.CallOption) (*EducationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EducationResponse)
	err := c.cc.Invoke(ctx, EducationService_GetEducationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationServiceClient) CreateEducation(ctx context.Context, in *CreateEducationRequest, opts ...grpc.CallOption) (*EducationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EducationResponse)
	err := c.cc.Invoke(ctx, EducationService_CreateEducation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationServiceClient) DeleteEducationByID(ctx context.Context, in *DeleteEducationByIDRequest, opts ...grpc.CallOption) (*DeleteEducationByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEducationByIDResponse)
	err := c.cc.Invoke(ctx, EducationService_DeleteEducationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationServiceClient) UpdateEducationByID(ctx context.Context, in *UpdateEducationByIDRequest, opts ...grpc.CallOption) (*EducationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EducationResponse)
	err := c.cc.Invoke(ctx, EducationService_UpdateEducationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EducationServiceServer is the server API for EducationService service.
// All implementations must embed UnimplementedEducationServiceServer
// for forward compatibility.
type EducationServiceServer interface {
	GetEducations(context.Context, *GetEducationsRequest) (*AllEducationsResponse, error)
	GetEducationByID(context.Context, *GetEducationByIDRequest) (*EducationResponse, error)
	CreateEducation(context.Context, *CreateEducationRequest) (*EducationResponse, error)
	DeleteEducationByID(context.Context, *DeleteEducationByIDRequest) (*DeleteEducationByIDResponse, error)
	UpdateEducationByID(context.Context, *UpdateEducationByIDRequest) (*EducationResponse, error)
	mustEmbedUnimplementedEducationServiceServer()
}

// UnimplementedEducationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEducationServiceServer struct{}

func (UnimplementedEducationServiceServer) GetEducations(context.Context, *GetEducationsRequest) (*AllEducationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEducations not implemented")
}
func (UnimplementedEducationServiceServer) GetEducationByID(context.Context, *GetEducationByIDRequest) (*EducationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEducationByID not implemented")
}
func (UnimplementedEducationServiceServer) CreateEducation(context.Context, *CreateEducationRequest) (*EducationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEducation not implemented")
}
func (UnimplementedEducationServiceServer) DeleteEducationByID(context.Context, *DeleteEducationByIDRequest) (*DeleteEducationByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEducationByID not implemented")
}
func (UnimplementedEducationServiceServer) UpdateEducationByID(context.Context, *UpdateEducationByIDRequest) (*EducationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEducationByID not implemented")
}
func (UnimplementedEducationServiceServer) mustEmbedUnimplementedEducationServiceServer() {}
func (UnimplementedEducationServiceServer) testEmbeddedByValue()                          {}

// UnsafeEducationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EducationServiceServer will
// result in compilation errors.
type UnsafeEducationServiceServer interface {
	mustEmbedUnimplementedEducationServiceServer()
}

func RegisterEducationServiceServer(s grpc.ServiceRegistrar, srv EducationServiceServer) {
	// If the following call pancis, it indicates UnimplementedEducationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EducationService_ServiceDesc, srv)
}

func _EducationService_GetEducations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEducationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationServiceServer).GetEducations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EducationService_GetEducations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationServiceServer).GetEducations(ctx, req.(*GetEducationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationService_GetEducationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEducationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationServiceServer).GetEducationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EducationService_GetEducationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationServiceServer).GetEducationByID(ctx, req.(*GetEducationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationService_CreateEducation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEducationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationServiceServer).CreateEducation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EducationService_CreateEducation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationServiceServer).CreateEducation(ctx, req.(*CreateEducationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationService_DeleteEducationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEducationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationServiceServer).DeleteEducationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EducationService_DeleteEducationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationServiceServer).DeleteEducationByID(ctx, req.(*DeleteEducationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationService_UpdateEducationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEducationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationServiceServer).UpdateEducationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EducationService_UpdateEducationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationServiceServer).UpdateEducationByID(ctx, req.(*UpdateEducationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EducationService_ServiceDesc is the grpc.ServiceDesc for EducationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EducationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "educations.EducationService",
	HandlerType: (*EducationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEducations",
			Handler:    _EducationService_GetEducations_Handler,
		},
		{
			MethodName: "GetEducationByID",
			Handler:    _EducationService_GetEducationByID_Handler,
		},
		{
			MethodName: "CreateEducation",
			Handler:    _EducationService_CreateEducation_Handler,
		},
		{
			MethodName: "DeleteEducationByID",
			Handler:    _EducationService_DeleteEducationByID_Handler,
		},
		{
			MethodName: "UpdateEducationByID",
			Handler:    _EducationService_UpdateEducationByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/educations.proto",
}
