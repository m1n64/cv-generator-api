// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/information.proto

package information

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InformationService_CreateOrUpdateInformation_FullMethodName = "/information.InformationService/CreateOrUpdateInformation"
	InformationService_GetInformationByCvID_FullMethodName      = "/information.InformationService/GetInformationByCvID"
	InformationService_DeleteInformationByCvID_FullMethodName   = "/information.InformationService/DeleteInformationByCvID"
)

// InformationServiceClient is the client API for InformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformationServiceClient interface {
	CreateOrUpdateInformation(ctx context.Context, in *CreateOrUpdateInformationRequest, opts ...grpc.CallOption) (*InformationResponse, error)
	GetInformationByCvID(ctx context.Context, in *GetInformationByCvIDRequest, opts ...grpc.CallOption) (*InformationResponse, error)
	DeleteInformationByCvID(ctx context.Context, in *DeleteInformationByCvIDRequest, opts ...grpc.CallOption) (*DeleteInformationByCvIDResponse, error)
}

type informationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInformationServiceClient(cc grpc.ClientConnInterface) InformationServiceClient {
	return &informationServiceClient{cc}
}

func (c *informationServiceClient) CreateOrUpdateInformation(ctx context.Context, in *CreateOrUpdateInformationRequest, opts ...grpc.CallOption) (*InformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InformationResponse)
	err := c.cc.Invoke(ctx, InformationService_CreateOrUpdateInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationServiceClient) GetInformationByCvID(ctx context.Context, in *GetInformationByCvIDRequest, opts ...grpc.CallOption) (*InformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InformationResponse)
	err := c.cc.Invoke(ctx, InformationService_GetInformationByCvID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationServiceClient) DeleteInformationByCvID(ctx context.Context, in *DeleteInformationByCvIDRequest, opts ...grpc.CallOption) (*DeleteInformationByCvIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInformationByCvIDResponse)
	err := c.cc.Invoke(ctx, InformationService_DeleteInformationByCvID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServiceServer is the server API for InformationService service.
// All implementations must embed UnimplementedInformationServiceServer
// for forward compatibility.
type InformationServiceServer interface {
	CreateOrUpdateInformation(context.Context, *CreateOrUpdateInformationRequest) (*InformationResponse, error)
	GetInformationByCvID(context.Context, *GetInformationByCvIDRequest) (*InformationResponse, error)
	DeleteInformationByCvID(context.Context, *DeleteInformationByCvIDRequest) (*DeleteInformationByCvIDResponse, error)
	mustEmbedUnimplementedInformationServiceServer()
}

// UnimplementedInformationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInformationServiceServer struct{}

func (UnimplementedInformationServiceServer) CreateOrUpdateInformation(context.Context, *CreateOrUpdateInformationRequest) (*InformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateInformation not implemented")
}
func (UnimplementedInformationServiceServer) GetInformationByCvID(context.Context, *GetInformationByCvIDRequest) (*InformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInformationByCvID not implemented")
}
func (UnimplementedInformationServiceServer) DeleteInformationByCvID(context.Context, *DeleteInformationByCvIDRequest) (*DeleteInformationByCvIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInformationByCvID not implemented")
}
func (UnimplementedInformationServiceServer) mustEmbedUnimplementedInformationServiceServer() {}
func (UnimplementedInformationServiceServer) testEmbeddedByValue()                            {}

// UnsafeInformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformationServiceServer will
// result in compilation errors.
type UnsafeInformationServiceServer interface {
	mustEmbedUnimplementedInformationServiceServer()
}

func RegisterInformationServiceServer(s grpc.ServiceRegistrar, srv InformationServiceServer) {
	// If the following call pancis, it indicates UnimplementedInformationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InformationService_ServiceDesc, srv)
}

func _InformationService_CreateOrUpdateInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServiceServer).CreateOrUpdateInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InformationService_CreateOrUpdateInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServiceServer).CreateOrUpdateInformation(ctx, req.(*CreateOrUpdateInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InformationService_GetInformationByCvID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInformationByCvIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServiceServer).GetInformationByCvID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InformationService_GetInformationByCvID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServiceServer).GetInformationByCvID(ctx, req.(*GetInformationByCvIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InformationService_DeleteInformationByCvID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInformationByCvIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServiceServer).DeleteInformationByCvID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InformationService_DeleteInformationByCvID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServiceServer).DeleteInformationByCvID(ctx, req.(*DeleteInformationByCvIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InformationService_ServiceDesc is the grpc.ServiceDesc for InformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "information.InformationService",
	HandlerType: (*InformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateInformation",
			Handler:    _InformationService_CreateOrUpdateInformation_Handler,
		},
		{
			MethodName: "GetInformationByCvID",
			Handler:    _InformationService_GetInformationByCvID_Handler,
		},
		{
			MethodName: "DeleteInformationByCvID",
			Handler:    _InformationService_DeleteInformationByCvID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/information.proto",
}
